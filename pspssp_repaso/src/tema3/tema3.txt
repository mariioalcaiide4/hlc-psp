ðŸ“Œ TCP (Transmission Control Protocol)

TCP es un protocolo orientado a conexiÃ³n, lo que significa que antes de enviar datos, debe establecerse una conexiÃ³n entre el cliente
 y el servidor. TCP garantiza que los datos lleguen en orden, sin errores y sin pÃ©rdidas.

ðŸ“Œ UDP (User Datagram Protocol)

UDP es un protocolo sin conexiÃ³n, lo que significa que los datos se envÃ­an sin establecer una conexiÃ³n previa.
No garantiza que los datos lleguen en orden ni que lleguen correctamente,
pero es mÃ¡s rÃ¡pido y eficiente en transmisiÃ³n de datos en tiempo real.

âœ… TCP garantiza la entrega de los datos y es ideal para aplicaciones que necesitan precisiÃ³n, como un sistema de mensajes o transferencia de archivos.
ðŸ”¹ Servidor TCP (escucha conexiones de clientes)

import java.io.*;
import java.net.*;

public class ServidorTCP {
    public static void main(String[] args) throws IOException {
        int puerto = 1234;
        ServerSocket serverSocket = new ServerSocket(puerto);
        System.out.println("Servidor TCP escuchando en el puerto " + puerto);

        while (true) {
            Socket socket = serverSocket.accept();
            System.out.println("Cliente conectado.");

            BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            PrintWriter output = new PrintWriter(socket.getOutputStream(), true);

            String mensaje = input.readLine();
            System.out.println("Mensaje recibido: " + mensaje);

            output.println("Mensaje recibido correctamente.");

            socket.close();
        }
    }
}

ðŸ”¹ Cliente TCP (envÃ­a un mensaje al servidor)

import java.io.*;
import java.net.*;

public class ClienteTCP {
    public static void main(String[] args) throws IOException {
        String servidor = "localhost";
        int puerto = 1234;

        Socket socket = new Socket(servidor, puerto);
        PrintWriter output = new PrintWriter(socket.getOutputStream(), true);
        BufferedReader input = new BufferedReader(new InputStreamReader(socket.getInputStream()));

        output.println("Hola, servidor TCP!");
        System.out.println("Respuesta del servidor: " + input.readLine());

        socket.close();
    }
}

ðŸŸ¢ Flujo TCP:

El servidor espera conexiones.
El cliente se conecta y envÃ­a un mensaje.
El servidor responde y cierra la conexiÃ³n.

Ejemplo de Servidor y Cliente en UDP

âœ… UDP es rÃ¡pido y se usa cuando no importa si se pierde algÃºn paquete (por ejemplo, en videojuegos en lÃ­nea).
ðŸ”¹ Servidor UDP (recibe mensajes)

import java.net.*;

public class ServidorUDP {
    public static void main(String[] args) throws Exception {
        int puerto = 1234;
        DatagramSocket socket = new DatagramSocket(puerto);
        System.out.println("Servidor UDP escuchando en el puerto " + puerto);

        byte[] buffer = new byte[1024];

        while (true) {
            DatagramPacket paquete = new DatagramPacket(buffer, buffer.length);
            socket.receive(paquete);

            String mensaje = new String(paquete.getData(), 0, paquete.getLength());
            System.out.println("Mensaje recibido: " + mensaje);
        }
    }
}

ðŸ”¹ Cliente UDP (envÃ­a un mensaje al servidor)

import java.net.*;

public class ClienteUDP {
    public static void main(String[] args) throws Exception {
        String servidor = "localhost";
        int puerto = 1234;

        DatagramSocket socket = new DatagramSocket();
        byte[] buffer = "Hola, servidor UDP!".getBytes();
        InetAddress direccion = InetAddress.getByName(servidor);

        DatagramPacket paquete = new DatagramPacket(buffer, buffer.length, direccion, puerto);
        socket.send(paquete);

        System.out.println("Mensaje enviado al servidor UDP.");
        socket.close();
    }
}